[magic(0xE7):1b][ver:1b][mkid:1b][kid:16b][nonce:12b][本文(ct)][tag:16b]

暗号空間(MKの作者固有) > MK空間(MK固有) < ユーザー空間(ユーザー固有)
暗号空間:	MK作者の管理空間 (SDM)
ユーザー空間:	ユーザーのlocalappdata (SD)

| 形式名)	入力)	アルゴリズム)	使用者)	固有空間)	暗号単位) 説明)
MK.e7		upass	xchacha		管理者	暗号			エントリ	マスターキーリスト 1ファイルのみ存在
.kid.e7		平文		HMAC		管理者	暗号 MKID	無		KEK-ID(KID)リスト マスターキーごとに存在
kek.e7		token	AES256GCM	ユーザー	ユーザ		ファイル	KEKリスト 割り当てられたKEKを保持 論理的に読み取り専用ファイル tokenで暗号化 ユーザーごとに1つずつ存在
.raw.kek.e7	平文		無			管理者	---			無		一時的に生成 長期間の保管は非推奨
cus.kek.e7	平文		無			ユーザー	ユーザ		無		KEKリスト拡張 暗号化の各部分に触れない見た目等のみをユーザーにカスタマイズを許可するため
.adm.kek.e7	MK		AES256GCM	管理者	暗号 ユーザ数	エントリ	基本構造は.kek.e7と同じ 管理者がKEKリストを保管するときに使う
.dst.kek.e7	upass	AES256GCM	両方		---			ファイル	基本構造は.kek.e7と同じ 管理者が配布用一時パスワードを設定し配布する際に使う dstファイル自体も一時的な存在 ユーザーはこれを受け取り直ちに.kek.e7に変換

token = ユーザーの環境ごとにOSシークレットストアに保存されたランダム32b

.kek.e7
	管理者 adm.kek.e7 -> dst.kek.e7
	ユーザー dst.kek.e7 -> kek.e7
		(内部でtoken使って再暗号化->プログラムのファイル群(localappdata/ead7)に保存)
	配布用パスワードは使い捨て

kek系に対するエントリの追記は、一旦raw.kekに戻してから追記して元の形式に戻す


. -> MK				管理者
MK + KID -> KEK		管理者
KEK + nonce -> DEC	利用者(システム内部で処理)

// kidPath			MK=1 の KID.label=test の場合、 01test


鍵の型
	核部分: BIN
	UI部分: base64url?

==================================================
CUI + CLIArg 完結型












鍵の失効を通達する機構がない どうすべきか